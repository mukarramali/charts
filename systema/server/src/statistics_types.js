//
// Autogenerated by Thrift Compiler (0.13.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;
var Int64 = require('node-int64');


var ttypes = module.exports = {};
var Statistics = module.exports.Statistics = function(args) {
  this.mean = null;
  this.median = null;
  this.variance = null;
  this.stdDev = null;
  if (args) {
    if (args.mean !== undefined && args.mean !== null) {
      this.mean = args.mean;
    }
    if (args.median !== undefined && args.median !== null) {
      this.median = args.median;
    }
    if (args.variance !== undefined && args.variance !== null) {
      this.variance = args.variance;
    }
    if (args.stdDev !== undefined && args.stdDev !== null) {
      this.stdDev = args.stdDev;
    }
  }
};
Statistics.prototype = {};
Statistics.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.DOUBLE) {
        this.mean = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.median = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.variance = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.stdDev = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Statistics.prototype.write = function(output) {
  output.writeStructBegin('Statistics');
  if (this.mean !== null && this.mean !== undefined) {
    output.writeFieldBegin('mean', Thrift.Type.DOUBLE, 1);
    output.writeDouble(this.mean);
    output.writeFieldEnd();
  }
  if (this.median !== null && this.median !== undefined) {
    output.writeFieldBegin('median', Thrift.Type.I32, 2);
    output.writeI32(this.median);
    output.writeFieldEnd();
  }
  if (this.variance !== null && this.variance !== undefined) {
    output.writeFieldBegin('variance', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.variance);
    output.writeFieldEnd();
  }
  if (this.stdDev !== null && this.stdDev !== undefined) {
    output.writeFieldBegin('stdDev', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.stdDev);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvalidOperation = module.exports.InvalidOperation = function(args) {
  Thrift.TException.call(this, "InvalidOperation");
  this.name = "InvalidOperation";
  this.whatOp = null;
  this.why = null;
  if (args) {
    if (args.whatOp !== undefined && args.whatOp !== null) {
      this.whatOp = args.whatOp;
    }
    if (args.why !== undefined && args.why !== null) {
      this.why = args.why;
    }
  }
};
Thrift.inherits(InvalidOperation, Thrift.TException);
InvalidOperation.prototype.name = 'InvalidOperation';
InvalidOperation.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.whatOp = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.why = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvalidOperation.prototype.write = function(output) {
  output.writeStructBegin('InvalidOperation');
  if (this.whatOp !== null && this.whatOp !== undefined) {
    output.writeFieldBegin('whatOp', Thrift.Type.I32, 1);
    output.writeI32(this.whatOp);
    output.writeFieldEnd();
  }
  if (this.why !== null && this.why !== undefined) {
    output.writeFieldBegin('why', Thrift.Type.STRING, 2);
    output.writeString(this.why);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

